services:
  # Frontend service (new)
  frontend:
    build:
      context: ./frontend  # assuming your frontend code is in ./frontend directory
      dockerfile: Dockerfile
    container_name: logistics-frontend
    networks:
      - app-network
    restart: always
    ports:
      - "5173:5173"  # Vite dev server port
      - "4173:4173"  # Vite preview port
    volumes:
      - ./frontend:/app
      - /app/node_modules  # prevent node_modules from being overwritten
    # Choose one of these commands:
    command: ["sh", "-c", "pnpm vite build && pnpm preview --host 0.0.0.0"]
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://0.0.0.0:8000  # Point to your backend API

  app:
    build: .
    container_name: logistics-api
    networks:
      - app-network
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=5115
      - DB_NAME=logistics
      - DEBUG=True
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-YOUR_TELEGRAM_BOT_TOKEN}
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic
    command: >
      bash -c "
      while ! nc -z db 5432; do sleep 0.5; done &&
      uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Optional: Run bot separately if you prefer
  bot:
    build: .
    container_name: logistics-bot
    networks:
      - app-network
    restart: always
    depends_on:
      - db
      - app
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=5115
      - DB_NAME=logistics
      - DEBUG=True
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    volumes:
      - ./app:/app/app
    command: python app/bot/start_bot.py

  db:
    image: postgres:latest
    networks:
      - app-network
    container_name: logistics-db
    restart: always
    ports:
      - "5115:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=5115
      - POSTGRES_DB=logistics
    volumes:
      - logistics-db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  init-db:
    build: .
    container_name: logistics-init-db
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=5115
      - DB_NAME=logistics
    command: >
      bash -c "
      alembic upgrade head &&
      python -c 'from app.db.init_db import init_db; from app.db.database import SessionLocal; init_db(SessionLocal())'
      "
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic

volumes:
  logistics-db-data:

networks:
  app-network:
    driver: bridge